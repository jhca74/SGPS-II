import sysimport osimport logging# Adicionar manualmente o caminho absoluto da pasta AIsys.path.append(r"C:\Users\anjos\OneDrive\Desktop\JHCA TIA VIII\AI")from nucleo_ia_struct import NucleoIALocal# ia_engine.py - Orquestrador das mÃºltiplas IAs e fallback para GPTclass IACentral:    def __init__(self):        self.ia_local = NucleoIALocal()        self.vetores = []        self.ias_externas = {            "gpt": self.responder_gpt,            "gemini": self.responder_gemini,            "deepseek": self.responder_deepseek,            "github": self.responder_github        }    def carregar_modelos(self):        # IA local jÃ¡ inicializada        logging.info("Modelos externos prontos para uso via API.")    def responder(self, pergunta):        print(f"[IA Engine] Nova pergunta recebida: {pergunta}")        # Roteamento baseado em critÃ©rios        if self._contem_dados_sensiveis(pergunta):            print("[IA Engine] Dados sensÃ­veis detetados. Usar IA local.")            return self.ia_local.responder_local(pergunta)        if self._tarefa_simples(pergunta):            print("[IA Engine] Tarefa simples. Usar IA local.")            return self.ia_local.responder_local(pergunta)        if self._tarefa_com_criterios_especificos(pergunta):            modelo = self._selecionar_ia_por_tarefa(pergunta)            print(f"[IA Engine] Tarefa direcionada. Usar modelo: {modelo}")            return self.ias_externas[modelo](pergunta)        print("[IA Engine] Roteamento padrÃ£o inteligente.")        for nome, metodo in self.ias_externas.items():            resposta = metodo(pergunta)            if resposta and len(resposta.strip()) > 10:                return resposta        print("[IA Engine] Nenhuma resposta externa viÃ¡vel. Fallback para IA local.")        return self.ia_local.responder_local(pergunta)# FunÃ§Ãµes auxiliares para orquestraÃ§Ã£o inteligentedef _contem_dados_sensiveis(self, pergunta):    termos = ["nif", "morada", "cc", "passaporte", "dados pessoais"]    return any(t in pergunta.lower() for t in termos)def _tarefa_simples(self, pergunta):    palavras_chave = ["resumo", "explica", "define", "o que Ã©", "resumidamente"]    return any(p in pergunta.lower() for p in palavras_chave) and len(pergunta.split()) < 25def _tarefa_com_criterios_especificos(self, pergunta):    especiais = ["pesquisa", "escreve um texto", "faz um artigo", "scraping", "github"]    return any(e in pergunta.lower() for e in especiais)def _selecionar_ia_por_tarefa(self, pergunta):    if "pesquisa" in pergunta.lower():        return "gemini"    if "github" in pergunta.lower():        return "github"    if "escreve" in pergunta.lower():        return "gpt"    return "deepseek"  # default fallback