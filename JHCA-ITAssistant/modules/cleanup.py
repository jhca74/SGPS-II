import osimport shutilimport timefrom PyQt5.QtWidgets import (    QMainWindow, QWidget, QVBoxLayout, QLabel,    QPushButton, QProgressBar, QMessageBox, QTextEdit,    QFileDialog, QCheckBox)from PyQt5.QtCore import Qtfrom PyQt5.QtGui import QFontclass Cleaner:    def __init__(self):        print("[CLEANUP] Cleaner backend inicializado.")        # Aqui poderÃ¡s ligar funÃ§Ãµes internas como:        # - self.limpar_temp()        # - self.limpar_downloads()class MainWindow(QMainWindow):    def __init__(self):        super().__init__()        self.setWindowTitle("Limpeza do Sistema")        self.setGeometry(200, 200, 600, 400)        self.pasta_personalizada = None        self.init_ui()    def init_ui(self):        central = QWidget()        self.setCentralWidget(central)        layout = QVBoxLayout(central)        label = QLabel("MÃ³dulo de Limpeza")        label.setFont(QFont("Segoe UI", 14))        layout.addWidget(label)        # Checkboxes para opÃ§Ãµes de limpeza        self.temp_check = QCheckBox("Limpar arquivos temporÃ¡rios")        self.temp_check.setChecked(True)        layout.addWidget(self.temp_check)        self.recycle_check = QCheckBox("Esvaziar Lixeira")        self.recycle_check.setChecked(True)        layout.addWidget(self.recycle_check)        self.downloads_check = QCheckBox("Limpar Downloads antigos")        layout.addWidget(self.downloads_check)        # BotÃ£o para selecionar pasta personalizada        custom_btn = QPushButton("Selecionar pasta para limpar")        custom_btn.clicked.connect(self.selecionar_pasta)        layout.addWidget(custom_btn)        # BotÃ£o de limpeza        clean_btn = QPushButton("Iniciar Limpeza")        clean_btn.clicked.connect(self.executar_limpeza)        layout.addWidget(clean_btn)        # Ãrea de log        self.log = QTextEdit()        self.log.setReadOnly(True)        layout.addWidget(self.log)        # Barra de progresso        self.progress = QProgressBar()        layout.addWidget(self.progress)    def selecionar_pasta(self):        pasta = QFileDialog.getExistingDirectory(self, "Selecionar Pasta")        if pasta:            self.pasta_personalizada = pasta            self.log.append(f"Pasta selecionada: {pasta}")    def executar_limpeza(self):        try:            self.progress.setValue(0)            self.log.clear()            self.log.append("Iniciando limpeza...")            # Limpar temporÃ¡rios            if self.temp_check.isChecked():                self.limpar_temp()                self.progress.setValue(30)            # Limpar lixeira            if self.recycle_check.isChecked():                self.limpar_lixeira()                self.progress.setValue(60)            # Limpar downloads            if self.downloads_check.isChecked():                self.limpar_downloads()                self.progress.setValue(90)            # Limpar pasta personalizada            if self.pasta_personalizada:                self.limpar_pasta_personalizada()            self.progress.setValue(100)            self.log.append("Limpeza concluÃ­da!")            QMessageBox.information(self, "Sucesso", "Limpeza concluÃ­da com sucesso!")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Erro durante a limpeza: {str(e)}")    def limpar_temp(self):        self.log.append("Limpando arquivos temporÃ¡rios...")        temp = os.environ.get('TEMP')        if temp and os.path.exists(temp):            try:                for item in os.listdir(temp):                    item_path = os.path.join(temp, item)                    try:                        if os.path.isfile(item_path):                            os.unlink(item_path)                        elif os.path.isdir(item_path):                            shutil.rmtree(item_path)                    except:                        pass                self.log.append("Arquivos temporÃ¡rios limpos.")            except Exception as e:                self.log.append(f"Erro ao limpar temporÃ¡rios: {str(e)}")    def limpar_lixeira(self):        self.log.append("Esvaziando a Lixeira...")        try:            os.system('rd /s /q C:\\$Recycle.Bin')            self.log.append("Lixeira esvaziada.")        except Exception as e:            self.log.append(f"Erro ao esvaziar lixeira: {str(e)}")    def limpar_downloads(self):        self.log.append("Limpando Downloads antigos...")        downloads = os.path.expanduser("~\\Downloads")        if os.path.exists(downloads):            try:                # Listar arquivos mais antigos que 30 dias                for item in os.listdir(downloads):                    item_path = os.path.join(downloads, item)                    if os.path.getctime(item_path) < (time.time() - 30 * 86400):  # 30 dias                        try:                            if os.path.isfile(item_path):                                os.unlink(item_path)                            elif os.path.isdir(item_path):                                shutil.rmtree(item_path)                        except:                            pass                self.log.append("Downloads antigos limpos.")            except Exception as e:                self.log.append(f"Erro ao limpar downloads: {str(e)}")    def limpar_pasta_personalizada(self):        if not self.pasta_personalizada:            return        self.log.append(f"Limpando pasta personalizada: {self.pasta_personalizada}")        try:            for item in os.listdir(self.pasta_personalizada):                item_path = os.path.join(self.pasta_personalizada, item)                try:                    if os.path.isfile(item_path):                        os.unlink(item_path)                    elif os.path.isdir(item_path):                        shutil.rmtree(item_path)                except:                    pass            self.log.append("Pasta personalizada limpa.")        except Exception as e:            self.log.append(f"Erro ao limpar pasta personalizada: {str(e)}")if __name__ == "__main__":    import sys    from PyQt5.QtWidgets import QApplication    app = QApplication(sys.argv)    window = MainWindow()    window.show()    sys.exit(app.exec_())