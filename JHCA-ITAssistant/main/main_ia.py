# main_ia.py - NÃºcleo de inicializaÃ§Ã£o das IAs com modo preditivoimport sysimport osimport logging# Corrigir sys.path para execuÃ§Ã£o local e dentro do .exeif getattr(sys, 'frozen', False):    project_root = os.path.dirname(sys.executable)else:    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))# Garantir que a raiz estÃ¡ no sys.pathif project_root not in sys.path:    sys.path.insert(0, project_root)# Subpastas a incluir explicitamentefor sub in ["main", "modules", "AI"]:    full_path = os.path.join(project_root, sub)    if full_path not in sys.path:        sys.path.append(full_path)# Importsfrom modules.scraping_engine import ScrapingEnginefrom modules.tunel_manager import TunelManagerfrom AI.ia_engine import IACentral# Logginglogging.basicConfig(filename="logs_ia.txt", level=logging.INFO, format="%(asctime)s - %(message)s")def iniciar_ia():    logging.info("Inicializando IACentral...")    ia = IACentral()    ia.carregar_modelos()    logging.info("IA Central carregada com sucesso.")    tunel = TunelManager()    tunel.iniciar()    return iadef executar_scraping_completo(ia):    logging.info("Iniciando scraping automatizado...")    scraper = ScrapingEngine()    termos = ["ferramentas IA", "problemas comuns software", "comparativos open source"]    resultados = []    for termo in termos:        resultado = scraper.pesquisar_software(termo)        resultados.extend(resultado)    ia.armazenar_vetores(resultados)    logging.info(f"Scraping finalizado. {len(resultados)} resultados adicionados.")if __name__ == "__main__":    ia = iniciar_ia()    executar_scraping_completo(ia)