import osfrom PyQt5.QtWidgets import QFileDialogfrom datetime import datetimefrom modules.email_sender import send_email_reportdef analyze_disk_usage(self):    self.result_text.clear()    folder = QFileDialog.getExistingDirectory(self, "Escolha o diretÃ³rio para anÃ¡lise")    if not folder:        self.result_text.append("âŒ OperaÃ§Ã£o cancelada.")        return    self.result_text.append(f"ðŸ“ A analisar: {folder}\n")    folder_sizes = []    try:        for item in os.listdir(folder):            path = os.path.join(folder, item)            if os.path.isdir(path):                size = sum(os.path.getsize(os.path.join(dirpath, f))                           for dirpath, _, files in os.walk(path)                           for f in files if os.path.exists(os.path.join(dirpath, f)))                folder_sizes.append((item, size, path))        folder_sizes.sort(key=lambda x: x[1], reverse=True)        for name, size, full_path in folder_sizes[:10]:            gb = size / (1024 ** 3)            self.result_text.append(f"ðŸ“ {name}: {gb:.2f} GB")        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        export_path = f"relatorio_disco_{now}.txt"        with open(export_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        self.result_text.append(f"ðŸ“„ RelatÃ³rio salvo: {export_path}")        send_email_report(            assunto="RelatÃ³rio de EspaÃ§o em Disco",            corpo="Segue o relatÃ³rio gerado pelo JHCA IT Assistant.",            anexo_path=export_path        )        self.result_text.append("ðŸ“§ Email enviado com sucesso!")    except Exception as e:        self.result_text.append(f"Erro: {e}")