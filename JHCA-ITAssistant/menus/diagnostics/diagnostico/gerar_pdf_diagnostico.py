def gerar_pdf_diagnostico(dados: dict, caminho_arquivo: str = "/mnt/data/relatorio_diagnostico.pdf"):    pdf = FPDF()    pdf.set_auto_page_break(auto=True, margin=15)    pdf.add_page()    pdf.set_font("Arial", "B", 16)    pdf.cell(0, 10, "RelatÃ³rio de DiagnÃ³stico do Sistema", ln=True, align="C")    pdf.ln(10)    def add_secao(titulo):        pdf.set_font("Arial", "B", 12)        pdf.set_text_color(30, 30, 120)        pdf.cell(0, 10, titulo, ln=True)        pdf.set_text_color(0, 0, 0)        pdf.set_font("Arial", "", 11)    def add_linha(label, valor):        pdf.multi_cell(0, 8, f"{label}: {valor}")    add_secao("InformaÃ§Ãµes do Sistema")    add_linha("Fabricante", dados.get("marca", "N/A"))    add_linha("Modelo", dados.get("modelo", "N/A"))    add_linha("Sistema Operativo", dados.get("so", "N/A"))    add_linha("Hostname", dados.get("hostname", "N/A"))    add_linha("EndereÃ§o IP", dados.get("ip", "N/A"))    add_linha("UUID", dados.get("uuid", "N/A"))    add_secao("MemÃ³ria RAM")    add_linha("RAM Instalada", f"{dados.get('ram_total', 'N/A')} GB")    ram = dados.get("especificacoes_extras", {})    add_linha("Tipo de RAM", ram.get("tipo_ram", "N/A"))    add_linha("RAM MÃ¡xima Suportada", ram.get("ram_max", "N/A"))    add_secao("BIOS")    add_linha("VersÃ£o Atual da BIOS", dados.get("bios_versao", "N/A"))    add_linha("VersÃ£o Mais Recente", ram.get("bios_versao_mais_recente", "N/A"))    add_linha("Link para BIOS", ram.get("link_bios", "N/A"))    import psutil    add_secao("Armazenamento")    for part in psutil.disk_partitions():        try:            usage = psutil.disk_usage(part.mountpoint)            add_linha("Disco", part.device)            add_linha("  Montado em", part.mountpoint)            add_linha("  Tipo", part.fstype)            add_linha("  EspaÃ§o Total", f"{usage.total // (1024**3)} GB")            add_linha("  EspaÃ§o Usado", f"{usage.used // (1024**3)} GB")            add_linha("  EspaÃ§o Livre", f"{usage.free // (1024**3)} GB")        except Exception:            add_linha("Disco", f"{part.device} (sem acesso)")    add_secao("EspecificaÃ§Ãµes Extras")    for key, val in ram.items():        if key not in ["tipo_ram", "ram_max", "bios_versao_mais_recente", "link_bios"]:            add_linha(key.replace("_", " ").title(), val)    pdf.ln(10)    pdf.set_font("Arial", "I", 8)    pdf.cell(0, 10, f"RelatÃ³rio gerado em {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)    pdf.output(caminho_arquivo)    return caminho_arquivo