import requestsfrom bs4 import BeautifulSoupdef extrair_dell_especificacoes(modelo: str):    try:        url_base = f"https://www.dell.com/support/home/pt-pt/product-support/product/{modelo}/drivers"        url_specs = f"https://www.dell.com/support/manuals/pt-pt/product/{modelo}"        headers = {"User-Agent": "Mozilla/5.0"}        res_specs = requests.get(url_specs, headers=headers)        soup_specs = BeautifulSoup(res_specs.text, 'html.parser')        links_manuais = soup_specs.find_all('a', href=True)        manual_url = None        for link in links_manuais:            if 'specifications' in link.text.lower() or 'especificaÃ§Ãµes' in link.text.lower():                manual_url = link['href']                break        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        origem_dados = [url_specs]        if manual_url:            full_manual_url = f"https://www.dell.com{manual_url}"            origem_dados.append(full_manual_url)            res_manual = requests.get(full_manual_url, headers=headers)            soup_manual = BeautifulSoup(res_manual.text, 'html.parser')            texto = soup_manual.get_text(separator='\n').lower()            for linha in texto.split('\n'):                if 'maximum memory' in linha or 'memÃ³ria mÃ¡xima' in linha:                    ram_max = linha.strip()                if 'ddr' in linha and 'ram' in linha:                    tipo_ram = linha.strip()        res = requests.get(url_base, headers=headers)        soup = BeautifulSoup(res.text, 'html.parser')        bios_info = soup.find_all('a', string=lambda s: s and 'BIOS' in s)        versao_bios = bios_info[0].text.strip() if bios_info else "Desconhecida"        link_bios = bios_info[0]['href'] if bios_info else url_base        link_drivers = url_base.replace("/drivers", "/") + "drivers"        origem_dados.append(url_base)        return {            "fabricante": "Dell",            "modelo": modelo,            "bios_versao_mais_recente": versao_bios,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": url_specs,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def aplicar_especificacoes_em_diagnostico(dados):    try:        from scraper_especificacoes import coletar_especificacoes        marca = dados.get("marca", "")        modelo = dados.get("modelo", "")        if marca and modelo:            dados["especificacoes_extras"] = coletar_especificacoes(marca, modelo)    except Exception as e:        dados["especificacoes_extras"] = {"erro": f"Falha ao coletar especificaÃ§Ãµes: {e}"}    return dadosdef extrair_lenovo_especificacoes(modelo: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_search_url = f"https://pcsupport.lenovo.com/pt/pt/search?query={modelo}"        origem_dados = [base_search_url]        # Step 1: Get redirected support page        res_search = requests.get(base_search_url, headers=headers)        soup_search = BeautifulSoup(res_search.text, "html.parser")        # Locate redirect link        support_links = soup_search.find_all("a", href=True)        suporte_modelo_url = None        for link in support_links:            href = link["href"]            if "/pt/pt/products/" in href:                suporte_modelo_url = "https://pcsupport.lenovo.com" + href                break        if not suporte_modelo_url:            return {"erro": f"Modelo '{modelo}' nÃ£o encontrado na Lenovo."}        origem_dados.append(suporte_modelo_url)        # Step 2: Get specifications page        specs_url = suporte_modelo_url + "/specs"        origem_dados.append(specs_url)        res_specs = requests.get(specs_url, headers=headers)        soup_specs = BeautifulSoup(res_specs.text, "html.parser")        texto = soup_specs.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum memory" in linha or "memÃ³ria mÃ¡xima" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        # Step 3: Links para BIOS/drivers        link_drivers = suporte_modelo_url + "/downloads"        link_bios = suporte_modelo_url + "/downloads?filter=BIOS"        return {            "fabricante": "Lenovo",            "modelo": modelo,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": specs_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def extrair_hp_especificacoes(modelo: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_search_url = f"https://support.hp.com/pt-pt/search?q={modelo}"        origem_dados = [base_search_url]        res_search = requests.get(base_search_url, headers=headers)        soup_search = BeautifulSoup(res_search.text, "html.parser")        support_links = soup_search.find_all("a", href=True)        suporte_modelo_url = None        for link in support_links:            href = link["href"]            if "/pt-pt/product/" in href and "document" not in href:                suporte_modelo_url = "https://support.hp.com" + href                break        if not suporte_modelo_url:            return {"erro": f"Modelo '{modelo}' nÃ£o encontrado no site da HP."}        origem_dados.append(suporte_modelo_url)        # Tenta acessar pÃ¡gina de especificaÃ§Ãµes        specs_url = suporte_modelo_url + "/document/c"        origem_dados.append(specs_url)        res_specs = requests.get(specs_url, headers=headers)        soup_specs = BeautifulSoup(res_specs.text, "html.parser")        texto = soup_specs.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum memory" in linha or "memÃ³ria mÃ¡xima" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        # Links fixos para drivers e BIOS        link_drivers = suporte_modelo_url + "/drivers"        link_bios = link_drivers + "?filter=BIOS"        return {            "fabricante": "HP",            "modelo": modelo,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": specs_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def extrair_asus_especificacoes(modelo: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_url = f"https://www.asus.com/support/search-result/?keyword={modelo}"        origem_dados = [base_url]        search_res = requests.get(base_url, headers=headers)        soup = BeautifulSoup(search_res.text, "html.parser")        links = soup.find_all("a", href=True)        suporte_modelo_url = None        for link in links:            href = link["href"]            if "/support/" in href and "faq" not in href and "news" not in href:                suporte_modelo_url = "https://www.asus.com" + href if href.startswith("/") else href                break        if not suporte_modelo_url:            return {"erro": f"Modelo '{modelo}' nÃ£o encontrado no site da ASUS."}        origem_dados.append(suporte_modelo_url)        specs_url = suporte_modelo_url.rstrip("/") + "/helpdesk_spec"        origem_dados.append(specs_url)        res_specs = requests.get(specs_url, headers=headers)        soup_specs = BeautifulSoup(res_specs.text, "html.parser")        texto = soup_specs.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum memory" in linha or "memÃ³ria mÃ¡xima" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        link_drivers = suporte_modelo_url.rstrip("/") + "/helpdesk_download"        link_bios = link_drivers + "?filter=BIOS"        return {            "fabricante": "ASUS",            "modelo": modelo,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": specs_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def extrair_acer_especificacoes(modelo: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_url = f"https://www.acer.com/ac/pt/PT/content/support-product/{modelo}"        origem_dados = [base_url]        page = requests.get(base_url, headers=headers)        if page.status_code != 200:            return {"erro": f"PÃ¡gina nÃ£o encontrada para o modelo Acer: {modelo}"}        soup = BeautifulSoup(page.text, 'html.parser')        texto = soup.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum memory" in linha or "memÃ³ria mÃ¡xima" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        link_drivers = base_url        link_bios = base_url + "#_ga=BIOS"        return {            "fabricante": "Acer",            "modelo": modelo,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": base_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def extrair_msi_especificacoes(modelo: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_url = f"https://www.msi.com/support/{modelo}"        origem_dados = [base_url]        res = requests.get(base_url, headers=headers)        if res.status_code != 200:            return {"erro": f"PÃ¡gina nÃ£o encontrada para o modelo MSI: {modelo}"}        soup = BeautifulSoup(res.text, "html.parser")        texto = soup.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum memory" in linha or "memÃ³ria mÃ¡xima" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        link_drivers = base_url + "/download"        link_bios = base_url + "/download?filter=BIOS"        return {            "fabricante": "MSI",            "modelo": modelo,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "link_bios": link_bios,            "link_drivers": link_drivers,            "fonte": base_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}def extrair_mac_especificacoes(model_identifier: str):    try:        headers = {"User-Agent": "Mozilla/5.0"}        base_url = f"https://everymac.com/ultimate-mac-lookup/?search_keywords={model_identifier}"        origem_dados = [base_url]        page = requests.get(base_url, headers=headers)        if page.status_code != 200:            return {"erro": f"PÃ¡gina nÃ£o encontrada para o modelo Apple: {model_identifier}"}        soup = BeautifulSoup(page.text, 'html.parser')        resultado = soup.find("div", class_="content-box-full")        if not resultado:            return {"erro": f"NÃ£o foi possÃ­vel encontrar especificaÃ§Ãµes para {model_identifier}"}        texto = resultado.get_text(separator="\n").lower()        ram_max = "Desconhecida"        tipo_ram = "Desconhecido"        for linha in texto.split("\n"):            if "maximum ram" in linha or "max ram" in linha:                ram_max = linha.strip()            if "ddr" in linha and "ram" in linha:                tipo_ram = linha.strip()        return {            "fabricante": "Apple",            "modelo": model_identifier,            "ram_max": ram_max,            "tipo_ram": tipo_ram,            "fonte": base_url,            "origem_dados": origem_dados        }    except Exception as e:        return {"erro": str(e)}