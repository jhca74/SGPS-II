from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QTextEdit, QPushButton, QFileDialogfrom PyQt5.QtGui import QFontfrom modules.ai_engine import IACentralclass ScrapingLocalTab(QWidget):    def __init__(self):        super().__init__()        layout = QVBoxLayout()        titulo = QLabel("Scraping Local de Ficheiros")        titulo.setFont(QFont("Arial", 14, QFont.Bold))        layout.addWidget(titulo)        self.input_instrucao = QTextEdit()        self.input_instrucao.setPlaceholderText("Ex: Extrai os nomes e emails deste ficheiro PDF.")        layout.addWidget(QLabel("InstruÃ§Ã£o"))        layout.addWidget(self.input_instrucao)        btn_selecionar_arquivo = QPushButton("ðŸ“‚ Selecionar Ficheiro Local")        btn_selecionar_arquivo.clicked.connect(self._selecionar_ficheiro)        layout.addWidget(btn_selecionar_arquivo)        self.label_ficheiro = QLabel("Nenhum ficheiro selecionado.")        layout.addWidget(self.label_ficheiro)        self.output_scraping = QTextEdit()        self.output_scraping.setReadOnly(True)        layout.addWidget(QLabel("Resposta da IA"))        layout.addWidget(self.output_scraping)        btn_processar = QPushButton("ðŸ¤– Processar com IA")        btn_processar.clicked.connect(self._processar_scraping)        layout.addWidget(btn_processar)        self.ia = IACentral()        self.setLayout(layout)    def _selecionar_ficheiro(self):        arquivo, _ = QFileDialog.getOpenFileName(self, "Selecionar Ficheiro", "", "Todos os Ficheiros (*.*);;PDF (*.pdf);;Word (*.docx);;Imagens (*.png *.jpg *.jpeg);;Texto (*.txt)")        if arquivo:            self.label_ficheiro.setText(arquivo)        else:            self.label_ficheiro.setText("Nenhum ficheiro selecionado.")    def _processar_scraping(self):        instrucao = self.input_instrucao.toPlainText().strip()        arquivo = self.label_ficheiro.text()        if not instrucao or arquivo == "Nenhum ficheiro selecionado.":            self.output_scraping.setText("âš ï¸ Insira uma instruÃ§Ã£o e selecione um ficheiro.")            return        resposta = self.ia.responder(f"[SCRAPING] {instrucao}->{arquivo}")        self.output_scraping.setText(resposta)class ScrapingExternoTab(QWidget):    def __init__(self):        super().__init__()        layout = QVBoxLayout()        titulo = QLabel("Scraping Externo (Websites/APIs)")        titulo.setFont(QFont("Arial", 14, QFont.Bold))        layout.addWidget(titulo)        label = QLabel("Scraping externo (websites/APIs).")        layout.addWidget(label)        self.setLayout(layout)class ScrapingBrowserTab(QWidget):    def __init__(self):        super().__init__()        layout = QVBoxLayout()        titulo = QLabel("Scraping de Navegador com IA")        titulo.setFont(QFont("Arial", 14, QFont.Bold))        layout.addWidget(titulo)        self.input_instrucao_browser = QTextEdit()        self.input_instrucao_browser.setPlaceholderText("Ex: Extrai os preÃ§os da pÃ¡gina do browser.")        layout.addWidget(QLabel("InstruÃ§Ã£o"))        layout.addWidget(self.input_instrucao_browser)        self.output_browser = QTextEdit()        self.output_browser.setReadOnly(True)        layout.addWidget(QLabel("Resposta da IA"))        layout.addWidget(self.output_browser)        btn_capturar = QPushButton("ðŸ“· Capturar Janela do Navegador e Processar")        btn_capturar.clicked.connect(self._processar_browser_ia)        layout.addWidget(btn_capturar)        self.ia = IACentral()        self.setLayout(layout)    def _processar_browser_ia(self):        instrucao = self.input_instrucao_browser.toPlainText().strip()        if not instrucao:            self.output_browser.setText("âš ï¸ Por favor, insira uma instruÃ§Ã£o.")            return        resposta = self.ia.responder(f"[BROWSER] {instrucao}")        self.output_browser.setText(resposta)