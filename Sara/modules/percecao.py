import speech_recognition as srfrom flair.models import TextClassifierfrom flair.data import Sentencefrom rich.console import Consoleconsole = Console()# ðŸ”Š OUVIDO - TranscriÃ§Ã£o de voz para textodef ouvir_microfone():    recognizer = sr.Recognizer()    with sr.Microphone() as source:        console.print("[cyan]A ouvir... fala agora.[/cyan]")        audio = recognizer.listen(source)    try:        texto = recognizer.recognize_google(audio, language="pt-PT")        console.print(f"[green]TranscriÃ§Ã£o:[/green] {texto}")        return texto    except sr.UnknownValueError:        return "NÃ£o percebi."    except sr.RequestError:        return "Erro ao aceder ao serviÃ§o de voz."# âŒ EXPRESSÃƒO FACIAL DESATIVADA (FER REMOVIDO)def ver_expressao_camera():    # FER removido â€“ funÃ§Ã£o desativada    return None# â¤ï¸ SENTIMENTO via texto (Flair)def analisar_sentimento_texto(texto):    classifier = TextClassifier.load('sentiment')    sentence = Sentence(texto)    classifier.predict(sentence)    resultado = sentence.labels[0]    return {"sentimento": resultado.value, "confianÃ§a": resultado.score}# Testes locaisif __name__ == "__main__":    print(ouvir_microfone())    print(ver_expressao_camera())    print(analisar_sentimento_texto("Estou feliz por ver isto funcionar!"))