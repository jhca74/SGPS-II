import osimport sysimport importlibimport requestsBASE_DIR = os.path.dirname(os.path.abspath(__file__))sys.path.append(BASE_DIR)LOG_FILE = os.path.join(BASE_DIR, "logs", "validador_start.txt")os.makedirs(os.path.join(BASE_DIR, "logs"), exist_ok=True)modulos = {    "core.painel_sara_main": "Painel principal FastAPI",    "compendio.memoria_compendio": "CompÃªndio semÃ¢ntico",    "ia_local.ia_resposta": "Resposta da IA local",    "ia_local.ollama_wrapper": "Wrapper para modelos locais",    "ia_local.estado_emocional": "Estado emocional",    "ia_local.responder_com_emoÃ§Ã£o": "Expressividade emocional",    "ia_local.log_interacoes": "Logs de interaÃ§Ãµes",    "nucleo_cloud.nucleo_cloud": "Fallback IA Cloud (LangChain)"}def testar_importacoes():    resultados = []    for modulo, descricao in modulos.items():        try:            importlib.import_module(modulo)            resultados.append(f"[OK] {descricao} ({modulo})")        except Exception as e:            resultados.append(f"[ERRO] {descricao} ({modulo}) -> {str(e)}")    return resultadosdef testar_fastapi():    try:        r = requests.get("http://localhost:8000")        if r.status_code == 200:            return "[OK] FastAPI estÃ¡ a correr e respondeu a /"        else:            return f"[ERRO] FastAPI respondeu com cÃ³digo {r.status_code}"    except Exception as e:        return f"[ERRO] FastAPI nÃ£o respondeu -> {str(e)}"def escrever_log(resultados):    with open(LOG_FILE, "w", encoding="utf-8") as f:        f.write("ValidaÃ§Ã£o da Sara - Resultado")        for r in resultados:            f.write(r + "\n")    print(f"Resultados guardados em: {LOG_FILE}")if __name__ == "__main__":    print("A validar estrutura da Sara...")    resultados = testar_importacoes()    resultados.append(testar_fastapi())    escrever_log(resultados)