import sysimport requestsfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel, QTextEdit, QVBoxLayout, QLineEdit, QPushButtonfrom PyQt5.QtGui import QFontfrom PyQt5.QtCore import Qtclass SaraInterface(QWidget):    def __init__(self):        super().__init__()        self.init_ui()    def init_ui(self):        self.setWindowTitle("Sara")        self.setGeometry(100, 100, 600, 400)        layout = QVBoxLayout()        self.response_label = QLabel("Sara Ã  escuta...", self)        self.response_label.setFont(QFont("Arial", 12))        self.response_label.setWordWrap(True)        layout.addWidget(self.response_label)        self.text_input = QTextEdit(self)        self.text_input.setFont(QFont("Arial", 10))        self.text_input.setPlaceholderText("Escreve algo e carrega Enter...")        layout.addWidget(self.text_input)        self.botao_programacao = QPushButton("ProgramaÃ§Ã£o")        self.botao_programacao.setFont(QFont("Arial", 10))        self.botao_programacao.clicked.connect(self.enviar_codigo)        layout.addWidget(self.botao_programacao)        self.setLayout(layout)        self.text_input.installEventFilter(self)    def eventFilter(self, source, event):        if event.type() == event.KeyPress and source is self.text_input:            if event.key() == Qt.Key_Return and not event.modifiers() & Qt.ShiftModifier:                self.perguntar()                return True        return super().eventFilter(source, event)    def perguntar(self):        texto = self.text_input.toPlainText().strip()        if not texto:            return        self.text_input.clear()        self.response_label.setText("ðŸ§  A pensar...")        try:            response = requests.post("http://localhost:8001/pergunta", json={"pergunta": texto})            if response.status_code == 200:                resultado = response.json()                resposta = resultado.get("resposta", "Sem resposta.")                self.response_label.setText(resposta)            else:                self.response_label.setText("Erro ao comunicar com a Sara.")        except Exception as e:            self.response_label.setText(f"Erro: {str(e)}")    def enviar_codigo(self):        texto = self.text_input.toPlainText().strip()        if not texto:            return        self.text_input.clear()        try:            prompt = f"Converte este pedido para cÃ³digo Python:\n\n{texto}"            response = requests.post("http://localhost:8001/pergunta", json={"pergunta": prompt})            if response.status_code == 200:                resultado = response.json()                resposta = resultado.get("resposta", "Sem resposta.")                self.response_label.setText(resposta)            else:                self.response_label.setText("Erro ao comunicar com a Sara.")        except Exception as e:            self.response_label.setText(f"Erro: {str(e)}")if __name__ == "__main__":    app = QApplication(sys.argv)    janela = SaraInterface()    janela.show()    sys.exit(app.exec_())