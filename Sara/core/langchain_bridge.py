# core/langchain_bridge.pyfrom nucleo_cloud.claude_api import responder_claudefrom nucleo_cloud.deepseek_api import responder_deepseekfrom nucleo_cloud.gemini_api import responder_geminifrom nucleo_cloud.gpt_api import responder_chatgptfrom datetime import datetimeimport osdef log_interacao(pergunta: str, resposta: str, origem: str):    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")    log_line = f"[{timestamp}] [{origem}] Pergunta: {pergunta} | Resposta: {resposta}\n"    log_path = os.path.join("logs", "interacoes_sara.log")    os.makedirs("logs", exist_ok=True)    with open(log_path, "a", encoding="utf-8") as log:        log.write(log_line)def perguntar_langchain(pergunta: str) -> str:    try:        resposta = responder_deepseek(pergunta)        log_interacao(pergunta, resposta, "DeepSeek")        return resposta    except Exception as e1:        print(f"[Fallback] DeepSeek falhou: {str(e1)}")    try:        resposta = responder_chatgpt(pergunta)        log_interacao(pergunta, resposta, "ChatGPT")        return resposta    except Exception as e2:        print(f"[Fallback] ChatGPT falhou: {str(e2)}")    try:        resposta = responder_gemini(pergunta)        log_interacao(pergunta, resposta, "Gemini")        return resposta    except Exception as e3:        print(f"[Fallback] Gemini falhou: {str(e3)}")    try:        resposta = responder_claude(pergunta)        log_interacao(pergunta, resposta, "Claude")        return resposta    except Exception as e4:        erro = f"[FALHA TOTAL] {str(e4)}"        log_interacao(pergunta, erro, "Erro")        return erro