import osimport jsonfrom datetime import datetimeclass AvaliacaoInterna:    def __init__(self, log="memoria/avaliacao.json"):        self.log_path = log        if not os.path.exists(os.path.dirname(log)):            os.makedirs(os.path.dirname(log))        if not os.path.exists(log):            with open(log, "w", encoding="utf-8") as f:                json.dump([], f, indent=2)    def registar_evento(self, componente, status, detalhes=None):        entrada = {            "componente": componente,            "estado": status,            "detalhes": detalhes,            "data": datetime.now().isoformat()        }        with open(self.log_path, "r+", encoding="utf-8") as f:            dados = json.load(f)            dados.append(entrada)            f.seek(0)            json.dump(dados, f, indent=2, ensure_ascii=False)    def avaliar_componentes(self):        resultados = []        try:            import core.visao_sara            resultados.append(("VisÃ£o", "OK"))        except Exception as e:            resultados.append(("VisÃ£o", "ERRO", str(e)))        try:            import voz.voz_sara            resultados.append(("Voz", "OK"))        except Exception as e:            resultados.append(("Voz", "ERRO", str(e)))        try:            import core.monitor_scraping            resultados.append(("Scraping", "OK"))        except Exception as e:            resultados.append(("Scraping", "ERRO", str(e)))        for r in resultados:            self.registar_evento(*r)if __name__ == "__main__":    a = AvaliacaoInterna()    a.avaliar_componentes()