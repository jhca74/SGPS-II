import sysimport ossys.path.append(os.path.dirname(os.path.abspath(__file__)))import osimport threadingimport timeimport requestsfrom PyQt5.QtWidgets import QApplication, QWidget, QTextEdit, QLineEdit, QVBoxLayout, QLabel, QMenu, QMenuBar, QActionfrom PyQt5.QtGui import QPixmap, QIconfrom PyQt5.QtCore import Qtimport pygamefrom fastapi import FastAPI, Requestfrom pydantic import BaseModelimport uvicornfrom modo_sara import atualizar_modofrom resposta_humana import gerar_respostaAUDIO_PATH = "smo/fala_sara.wav"# FastAPI app setupapp = FastAPI(title="Sara App", version="1.0")# Pydantic model for POST requestsclass Pedido(BaseModel):    pergunta: str# Function to generate voice via XTTSdef sara_fala(texto: str, idioma="pt", ficheiro="fala_sara.wav"):    try:        requests.post(            "http://localhost:5010/falar",            json={"texto": texto, "idioma": idioma, "ficheiro_saida": ficheiro},            timeout=10        )    except Exception as erro:        print(f"[ERRO XTTS] {erro}")# FastAPI endpoints@app.get("/")def estado():    return {"status": "ok", "mensagem": "Sara app ativo na porta 8001"}@app.post("/pergunta")async def perguntar(pedido: Pedido):    pergunta = pedido.pergunta    atualizar_modo(pergunta)    resposta = gerar_resposta(pergunta)    try:        sara_fala(resposta)    except Exception as e:        resposta += f" [Erro ao gerar voz: {str(e)}]"    return {"resposta": resposta}# PyQt5 frontendclass SaraApp(QWidget):    def __init__(self):        super().__init__()        self.setWindowTitle("Sara - Assistente Pessoal")        self.setGeometry(100, 100, 500, 600)        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.WindowCloseButtonHint)        self.setWindowIcon(QIcon("assets/logo_sara.jpg"))        self.layout = QVBoxLayout()        # Menu        self.menu_bar = QMenuBar(self)        self.menu = self.menu_bar.addMenu("Menu Sara")        self.menu.addAction("Coding", lambda: self.enviar_comando("iniciar coding"))        self.menu.addAction("Webdesign", lambda: self.enviar_comando("iniciar webdesign"))        self.menu.addAction("Scraping Interno", lambda: self.enviar_comando("iniciar scraping interno"))        self.menu.addAction("Scraping Externo", lambda: self.enviar_comando("iniciar scraping externo"))        self.menu.addAction("Novo Projeto", lambda: self.enviar_comando("novo projeto"))        self.menu.addAction("Projetos em Curso", lambda: self.enviar_comando("estado dos projetos"))        self.layout.setMenuBar(self.menu_bar)        # Image        self.imagem = QLabel()        pixmap = QPixmap("assets/sara_foto.png").scaled(120, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation)        self.imagem.setPixmap(pixmap)        self.imagem.setAlignment(Qt.AlignCenter)        self.layout.addWidget(self.imagem)        # Chat area        self.chat_area = QTextEdit()        self.chat_area.setReadOnly(True)        self.layout.addWidget(self.chat_area)        # Input field        self.input = QLineEdit()        self.input.setPlaceholderText("Escreve para a Sara e carrega Enter...")        self.input.returnPressed.connect(self.enviar_pergunta)        self.layout.addWidget(self.input)        self.setLayout(self.layout)        # Initialize sound        pygame.mixer.init()    def enviar_pergunta(self):        pergunta = self.input.text().strip()        if not pergunta:            return        self.chat_area.append(f"Tu: {pergunta}")        self.input.clear()        def processar():            try:                resposta = requests.post("http://localhost:8001/pergunta", json={"pergunta": pergunta})                if resposta.status_code == 200:                    resposta_txt = resposta.json().get("resposta", "(resposta vazia)")                    self.chat_area.append(f"Sara: {resposta_txt}")                    self.reproduzir_audio()                else:                    self.chat_area.append("(Erro ao comunicar com a Sara)")            except Exception as e:                self.chat_area.append(f"(Erro: {str(e)})")        threading.Thread(target=processar).start()    def enviar_comando(self, comando):        self.chat_area.append(f"Tu: {comando}")        def processar():            try:                resposta = requests.post("http://localhost:8001/pergunta", json={"pergunta": comando})                if resposta.status_code == 200:                    resposta_txt = resposta.json().get("resposta", "(resposta vazia)")                    self.chat_area.append(f"Sara: {resposta_txt}")                    self.reproduzir_audio()                else:                    self.chat_area.append("(Erro ao comunicar com a Sara)")            except Exception as e:                self.chat_area.append(f"(Erro: {str(e)})")        threading.Thread(target=processar).start()    def reproduzir_audio(self):        if os.path.exists(AUDIO_PATH):            try:                pygame.mixer.music.load(AUDIO_PATH)                pygame.mixer.music.play()            except Exception as e:                self.chat_area.append(f"(Erro ao reproduzir Ã¡udio: {e})")# Run FastAPI in a separate threaddef run_server():    uvicorn.run(app, host="0.0.0.0", port=8001)if __name__ == "__main__":    # Start FastAPI server in a thread    server_thread = threading.Thread(target=run_server)    server_thread.daemon = True    server_thread.start()    time.sleep(2)  # Wait for server to start    # Start PyQt5 frontend    qt_app = QApplication(sys.argv)    janela = SaraApp()    janela.show()    sys.exit(qt_app.exec_())