import threadingimport timeimport jsonimport osfrom datetime import datetimeclass AutoAjusteCognitivo:    def __init__(self, caminho_logs='data/logs/feedback_logs.json'):        self.caminho_logs = caminho_logs        self.padroes_utilizacao = {}        self.estado_emocional = "neutro"        self._carregar_logs()        self.loop_ativo = False    def _carregar_logs(self):        if os.path.exists(self.caminho_logs):            with open(self.caminho_logs, 'r', encoding='utf-8') as f:                try:                    dados = json.load(f)                    self.padroes_utilizacao = dados.get("padroes", {})                    self.estado_emocional = dados.get("estado_emocional", "neutro")                except json.JSONDecodeError:                    self.padroes_utilizacao = {}        else:            self.padroes_utilizacao = {}    def _guardar_logs(self):        os.makedirs(os.path.dirname(self.caminho_logs), exist_ok=True)        with open(self.caminho_logs, 'w', encoding='utf-8') as f:            json.dump({                "padroes": self.padroes_utilizacao,                "estado_emocional": self.estado_emocional            }, f, ensure_ascii=False, indent=2)    def ajustar_comportamento(self):        total_erros = len(self.padroes_utilizacao.get("erro", []))        total_elogios = len(self.padroes_utilizacao.get("elogio", []))        total_sugestoes = len(self.padroes_utilizacao.get("sugestao", []))        if total_erros > total_elogios:            self.estado_emocional = "tenso"        elif total_elogios > total_erros and total_elogios > 0:            self.estado_emocional = "positivo"        elif total_sugestoes > 3:            self.estado_emocional = "atento"        else:            self.estado_emocional = "neutro"        print(f"[AutoAjuste] Estado emocional atualizado: {self.estado_emocional}")        self._guardar_logs()    def iniciar_autoajuste_loop(self, intervalo_segundos=120):        if self.loop_ativo:            return        self.loop_ativo = True        def loop():            print("[AutoAjuste] Loop de autoajuste iniciado.")            while self.loop_ativo:                self.ajustar_comportamento()                time.sleep(intervalo_segundos)        threading.Thread(target=loop, daemon=True).start()    def parar_loop(self):        self.loop_ativo = False        print("[AutoAjuste] Loop de autoajuste terminado.")if __name__ == "__main__":    ajustador = AutoAjusteCognitivo()    ajustador.iniciar_autoajuste_loop()