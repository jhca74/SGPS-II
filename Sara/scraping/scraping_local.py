import osimport pathlibimport datetimeEXTENSOES_VALIDAS = ['.txt', '.py', '.md', '.html', '.htm', '.pdf', '.docx']PASTAS_MONITORADAS = [    "C:/Users/anjos/Desktop/fontes",    "C:/Users/anjos/Desktop/JHCA/Sara/memoria/docs"]PASTA_SAIDA = "memoria/indexado/"os.makedirs(PASTA_SAIDA, exist_ok=True)def ler_ficheiro_texto(caminho):    try:        with open(caminho, 'r', encoding='utf-8', errors='ignore') as f:            return f.read()    except Exception as e:        return f"[ERRO ao ler {caminho}]: {e}"def guardar_saida(nome_ficheiro, conteudo):    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")    nome_base = pathlib.Path(nome_ficheiro).stem    destino = f"{PASTA_SAIDA}{nome_base}_{timestamp}.txt"    with open(destino, 'w', encoding='utf-8') as f:        f.write(conteudo)def scraping_local():    total = 0    for pasta in PASTAS_MONITORADAS:        for raiz, _, ficheiros in os.walk(pasta):            for f in ficheiros:                caminho = os.path.join(raiz, f)                ext = pathlib.Path(f).suffix.lower()                if ext in EXTENSOES_VALIDAS:                    conteudo = ler_ficheiro_texto(caminho)                    if conteudo and len(conteudo.strip()) > 20:                        guardar_saida(f, conteudo)                        total += 1    print(f"[OK] Scraping concluÃ­do. {total} ficheiros lidos e indexados.")if __name__ == "__main__":    scraping_local()