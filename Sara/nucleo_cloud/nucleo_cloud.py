from langchain.agents import AgentExecutor, initialize_agentfrom langchain.agents.agent_types import AgentTypefrom langchain_community.tools import DuckDuckGoSearchRunfrom langchain_core.prompts import PromptTemplatefrom langchain.agents.tools import Toolimport osfrom dotenv import load_dotenvfrom rich.console import Consolefrom langchain_community.llms import OpenAIfrom langchain_openai import ChatOpenAIfrom langchain_google_genai import ChatGoogleGenerativeAIfrom langchain_community.llms.deepseek import DeepSeekLLMfrom langchain_community.llms.anthropic import ChatAnthropicload_dotenv()console = Console()# ðŸ” API KeysCLAUDE_API_KEY = os.getenv("ANTHROPIC_API_KEY")GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")# ðŸ”— LLMs PrioritÃ¡riosllm_claude = ChatAnthropic(temperature=0.7, model="claude-3-opus-20240229", api_key=CLAUDE_API_KEY)llm_gemini = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.7, google_api_key=GOOGLE_API_KEY)llm_deepseek = DeepSeekLLM(model="deepseek-chat", temperature=0.7)llm_gpt = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7, api_key=OPENAI_API_KEY)# Fallback automÃ¡ticodef selecionar_modelo_disponivel():    for llm, nome in [(llm_claude, "Claude"), (llm_gemini, "Gemini"), (llm_deepseek, "DeepSeek"), (llm_gpt, "GPT")]:        try:            _ = llm.invoke("Diz apenas 'ok'")            console.log(f"[cloud] âœ… NÃºcleo ativo: {nome}")            return llm        except Exception as e:            console.log(f"[cloud] âš ï¸ Erro ao tentar usar {nome}: {str(e)[:60]}...")    raise RuntimeError("Nenhum modelo LLM cloud disponÃ­vel.")# Ferramentas disponÃ­veistools = [    Tool(        name="Pesquisar na Web",        func=DuckDuckGoSearchRun().run,        description="Pesquisa na web por informaÃ§Ãµes recentes ou factuais"    ),]# Executordef executar_agente_cloud(pergunta: str):    llm = selecionar_modelo_disponivel()    agente = initialize_agent(        tools=tools,        llm=llm,        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,        verbose=True    )    return agente.run(pergunta)