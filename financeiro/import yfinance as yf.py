import yfinance as yfimport pandas as pdimport tafrom prophet import Prophetfrom nltk.sentiment.vader import SentimentIntensityAnalyzerimport nltkfrom reportlab.lib.pagesizes import letterfrom reportlab.pdfgen import canvasimport hashlibimport pyarrow.parquet as pqimport requestsfrom flask import Flask, render_templatefrom datetime import datetime# Baixar recursos do NLTK (executar uma vez)nltk.download("vader_lexicon")# Configurar Flaskapp = Flask(__name__)# FunÃ§Ã£o para coletar dados de criptomoedas (CoinGecko)def get_crypto_data(coin_id="bitcoin", days=365):    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart?vs_currency=usd&days={days}"    response = requests.get(url).json()    prices = pd.DataFrame(response["prices"], columns=["timestamp", "price"])    prices["timestamp"] = pd.to_datetime(prices["timestamp"], unit="ms")    prices.set_index("timestamp", inplace=True)    return prices.rename(columns={"price": "Close"})# FunÃ§Ã£o para anÃ¡lise de dados (aÃ§Ãµes ou cripto)def analyze_asset(ticker, is_crypto=False, coin_id=None):    # Pseudonimizar usuÃ¡rio (RGPD)    user_id = "user123"    hashed_user = hashlib.sha256(user_id.encode()).hexdigest()    # Coleta de dados    if is_crypto:        df = get_crypto_data(coin_id=coin_id)    else:        stock = yf.Ticker(ticker)        df = stock.history(period="1y")    # Otimizar memÃ³ria com float32    df["Close"] = df["Close"].astype("float32")    # Indicadores tÃ©cnicos    df["MA20"] = df["Close"].rolling(window=20).mean()    df["RSI"] = ta.momentum.RSIIndicator(df["Close"], window=14).rsi()    # Salvar em Parquet (economia de memÃ³ria)    df.to_parquet(f"{ticker}_data.parquet", engine="pyarrow")    # PrevisÃ£o com Prophet    df_prophet = df[["Close"]].reset_index()    df_prophet.columns = ["ds", "y"]    model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=True)    model.fit(df_prophet)    future = model.make_future_dataframe(periods=1)    forecast = model.predict(future)    predicted_price = forecast["yhat"].iloc[-1]    # AnÃ¡lise de sentimento com VADER    sia = SentimentIntensityAnalyzer()    news = "Apple reports strong earnings, stock expected to rise."  # Substituir por NewsAPI/scraping    sentiment = sia.polarity_scores(news)["compound"]    # AnÃ¡lise fundamentalista (apenas para aÃ§Ãµes)    if not is_crypto:        info = stock.info        pe_ratio = info.get("trailingPE", "N/A")        dividend_yield = info.get("dividendYield", 0) * 100 if info.get("dividendYield") else "N/A"    else:        pe_ratio = "N/A"        dividend_yield = "N/A"    # RelatÃ³rio PDF (sem dados pessoais)    pdf_file = f"relatorio_{ticker}.pdf"    c = canvas.Canvas(pdf_file, pagesize=letter)    c.drawString(100, 750, f"RelatÃ³rio Financeiro: {ticker}")    c.drawString(100, 730, f"P/L: {pe_ratio}")    c.drawString(100, 710, f"Dividend Yield: {dividend_yield:.2f}%")    c.drawString(100, 690, f"PrevisÃ£o para amanhÃ£ (Prophet): ${predicted_price:.2f}")    c.drawString(100, 670, f"Sentimento de notÃ­cias: {sentiment:.2f}")    c.drawString(100, 650, "Ãšltimos PreÃ§os:")    for i, row in df.tail(5).iterrows():        c.drawString(100, 630 - i*20, f"{row.name.date()}: Close=${row['Close']:.2f}, RSI={row['RSI']:.2f}")    c.save()    return {        "ticker": ticker,        "pe_ratio": pe_ratio,        "dividend_yield": dividend_yield,        "predicted_price": predicted_price,        "sentiment": sentiment,        "recent_data": df[["Close", "RSI"]].tail(5).to_dict(),        "pdf_file": pdf_file    }# Rota Flask para dashboard@app.route("/")def dashboard():    # Analisar um ativo (ex.: Apple - NYSE)    data = analyze_asset(ticker="AAPL", is_crypto=False)    return render_template("index.html", **data)# Rota para outros ativos@app.route("/asset/<ticker>")def asset(ticker):    # Suporte a cripto (ex.: BTC)    is_crypto = ticker.startswith("crypto-")    coin_id = ticker.replace("crypto-", "") if is_crypto else None    data = analyze_asset(ticker=ticker, is_crypto=is_crypto, coin_id=coin_id)    return render_template("index.html", **data)if __name__ == "__main__":    # Testar anÃ¡lise    data = analyze_asset(ticker="AAPL", is_crypto=False)    print(f"RelatÃ³rio gerado: {data['pdf_file']}")    app.run(debug=True, host="localhost", port=5000)