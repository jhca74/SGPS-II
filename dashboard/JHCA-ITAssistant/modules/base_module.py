# === Loader de Submenus Mobile: Android ou iOS ===import subprocessfrom PyQt5.QtWidgets import QMessageBox  # â† caso queiras mensagens na GUI futuramentedef detectar_dispositivo_mobile():    try:        android_state = subprocess.check_output(["adb", "get-state"], text=True).strip()        if "device" in android_state:            return "android"    except Exception:        pass    try:        ios_info = subprocess.check_output(["ideviceinfo"], text=True)        if "DeviceName" in ios_info:            return "ios"    except Exception:        pass    return "nenhum"def carregar_submenus_mobile(tipo):    if tipo == "android":        return [            "diagnostico_android",            "recuperacao_android",            "reparacao_android",            "otimizacao_android",            "gestao_dados_android",            "ferramentas_avancadas_android"        ]    elif tipo == "ios":        return [            "diagnostico_ios",            "recuperacao_ios",            "reparacao_ios",            "otimizacao_ios",            "gestao_dados_ios",            "ferramentas_avancadas_ios"        ]    else:        return []# âœ… CLASSE MobileLoader COMPLETAclass MobileLoader:    def __init__(self):        print("[MOBILE] Loader de dispositivos mÃ³veis inicializado.")        self.tipo = detectar_dispositivo_mobile()        self.submenus = carregar_submenus_mobile(self.tipo)    def listar(self):        if not self.submenus:            print("Nenhum submenu disponÃ­vel.")        else:            print(f"Dispositivo detectado: {self.tipo.upper()}")            for submenu in self.submenus:                print(f" - {submenu}")    def mostrar_popup(self):        if self.tipo != "nenhum":            msg = QMessageBox()            msg.setWindowTitle("Dispositivo Detetado")            msg.setText(f"Tipo: {self.tipo.upper()}\nSubmenus: {', '.join(self.submenus)}")            msg.exec_()