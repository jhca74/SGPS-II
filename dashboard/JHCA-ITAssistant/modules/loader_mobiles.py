import osimport sysimport subprocessfrom PyQt5.QtWidgets import QMessageBox# Caminho seguro para pasta tools (mesmo no executÃ¡vel)def get_tools_path():    if getattr(sys, 'frozen', False):        base_path = sys._MEIPASS    else:        base_path = os.path.dirname(__file__)    return os.path.abspath(os.path.join(base_path, '..', 'tools'))def detectar_dispositivo_mobile():    tools_path = get_tools_path()    adb_path = os.path.join(tools_path, 'adb.exe')    try:        android_state = subprocess.check_output([adb_path, "get-state"], text=True).strip()        if "device" in android_state:            return "android"    except Exception as e:        print("[MOBILE][DEBUG] Erro ADB:", e)    # iOS ainda a integrar com libimobiledevice    return "nenhum"def carregar_submenus_mobile(tipo):    if tipo == "android":        return [            "diagnostico_android",            "recuperacao_android",            "reparacao_android",            "otimizacao_android",            "gestao_dados_android",            "ferramentas_avancadas_android"        ]    elif tipo == "ios":        return [            "diagnostico_ios",            "recuperacao_ios",            "reparacao_ios",            "otimizacao_ios",            "gestao_dados_ios",            "ferramentas_avancadas_ios"        ]    return []class MobileLoader:    def __init__(self):        print("[MOBILE] Loader de dispositivos mÃ³veis inicializado.")        self.tipo = detectar_dispositivo_mobile()        self.submenus = carregar_submenus_mobile(self.tipo)    def listar(self):        if not self.submenus:            print("Nenhum submenu disponÃ­vel.")        else:            print(f"Dispositivo detectado: {self.tipo.upper()}")            for submenu in self.submenus:                print(f" - {submenu}")    def mostrar_popup(self):        if self.tipo != "nenhum":            msg = QMessageBox()            msg.setWindowTitle("Dispositivo Detetado")            msg.setText(f"Tipo: {self.tipo.upper()}\nSubmenus: {', '.join(self.submenus)}")            msg.exec_()