from PyQt5.QtWidgets import (    QWidget, QTabWidget, QVBoxLayout, QPushButton, QLabel, QTextEdit,    QLineEdit, QMessageBox, QFileDialog, QApplication)from PyQt5.QtGui import QFont, QIconimport webbrowserimport platformimport osimport sysimport requestsimport threadingfrom fastapi import FastAPI, HTTPExceptionfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import BaseModelfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.runnables import RunnablePassthroughfrom langchain_community.llms import Ollamaimport uvicorn# BACKEND FASTAPIapp = FastAPI()app.add_middleware(    CORSMiddleware,    allow_origins=["*"],    allow_credentials=True,    allow_methods=["*"],    allow_headers=["*"])class RequisicaoCodigo(BaseModel):    instrucao: str    linguagem: str    tema: str = ""class BrainstormRequest(BaseModel):    texto: strllm = Ollama(model="llama3")prompt = ChatPromptTemplate.from_template(    "InstruÃ§Ã£o: {instrucao}\nLinguagem: {linguagem}\n{tema}")chain = {"instrucao": RunnablePassthrough(), "linguagem": RunnablePassthrough(), "tema": RunnablePassthrough()} | prompt | llm | StrOutputParser()@app.post("/gerar_codigo")def gerar_codigo(req: RequisicaoCodigo):    try:        out = chain.invoke(req.dict())        return {"codigo": out}    except Exception as e:        raise HTTPException(status_code=500, detail=str(e))@app.post("/brainstorm")def brainstorm(req: BrainstormRequest):    try:        out = llm.invoke(f"Gere ideias criativas com base no seguinte prompt: {req.texto}")        return {"resposta": out}    except Exception as e:        raise HTTPException(status_code=500, detail=str(e))@app.post("/executar_fluxo")def executar_fluxo(req: BaseModel):    return {"resposta": "Fluxo de LangChain executado com sucesso!"}@app.get("/scraping_local")def scraping_local():    return {"resposta": "Scraping local iniciado."}@app.get("/scraping_externo")def scraping_externo():    return {"resposta": "Scraping externo com LangChain ativo."}# INTERFACE PYQT5class SubDashboardIAWidget(QWidget):    def __init__(self, tipo_utilizador="nao_registrado", sessoes_restantes=10):        super().__init__()        self.setWindowTitle("Subdashboard IA - Comando Central")        self.setGeometry(200, 200, 1200, 800)        self.layout = QVBoxLayout()        self.tipo_utilizador = tipo_utilizador        self.sessoes_restantes = sessoes_restantes        if self._verificar_maquina_autenticada():            self.tipo_utilizador = "superadmin"        if self.tipo_utilizador == "nao_registrado":            if self.sessoes_restantes <= 1:                QMessageBox.critical(self, "Fim de SessÃ£o", "Esta Ã© a sua Ãºltima sessÃ£o.")            elif self.sessoes_restantes == 2:                QMessageBox.warning(self, "Aviso", "EstÃ¡ a duas sessÃµes do limite.")        self.tabs = QTabWidget()        self.layout.addWidget(self.tabs)        self._setup_tabs()        self.setLayout(self.layout)    def _verificar_maquina_autenticada(self):        return platform.node().lower() == "anjos-pc"    def _setup_tabs(self):        self.tabs.addTab(self._vpn_tab(), QIcon(), "VPN")        if self.tipo_utilizador == "superadmin":            self.tabs.addTab(self._tunel_tab(), QIcon(), "TÃºnel Remoto")        if self.tipo_utilizador in ["admin", "superadmin", "tester"]:            self.tabs.addTab(self._brainstorm_tab(), QIcon(), "Brainstorm")            self.tabs.addTab(self._langchain_tab(), QIcon(), "LangChain")            self.tabs.addTab(self._compendio_tab(), QIcon(), "CompÃªndio")            self.tabs.addTab(self._scraping_local_tab(), QIcon(), "Scraping Local")            self.tabs.addTab(self._scraping_externo_tab(), QIcon(), "Scraping Externo")            self.tabs.addTab(self._gerador_codigo_tab(), QIcon(), "Gerador CÃ³digo")            self.tabs.addTab(self._cybersecurity_tab(), QIcon(), "Cybersecurity")    def _vpn_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("GestÃ£o de VPN: WireGuard/OpenVPN"))        btn = QPushButton("Iniciar VPN")        btn.clicked.connect(lambda: os.system("start wireguard.exe"))        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _tunel_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("TÃºnel Remoto - Acesso externo seguro"))        btn = QPushButton("Ativar TÃºnel")        btn.clicked.connect(lambda: os.system("start remotetunnel.exe"))        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _brainstorm_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("IA Brainstorm: geraÃ§Ã£o livre de ideias e prompts"))        self.brainstorm_input = QTextEdit()        self.brainstorm_input.setPlaceholderText("Digite seu prompt para ideias criativas...")        layout.addWidget(self.brainstorm_input)        self.brainstorm_output = QTextEdit()        self.brainstorm_output.setReadOnly(True)        layout.addWidget(self.brainstorm_output)        btn = QPushButton("Enviar para IA")        btn.clicked.connect(self._enviar_brainstorm)        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _enviar_brainstorm(self):        texto = self.brainstorm_input.toPlainText()        if not texto.strip():            QMessageBox.warning(self, "Vazio", "Digite um prompt para brainstorm.")            return        try:            resp = requests.post("http://localhost:8000/brainstorm", json={"texto": texto}, timeout=15)            if resp.status_code == 200:                self.brainstorm_output.setPlainText(resp.json().get("resposta", "Erro"))            else:                QMessageBox.critical(self, "Erro", f"Erro ao processar brainstorm: {resp.text}")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Falha ao conectar ao backend: {str(e)}")    def _langchain_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("LangChain: OrquestraÃ§Ã£o inteligente de tarefas"))        btn = QPushButton("Executar Fluxo LangChain")        btn.clicked.connect(self._executar_fluxo_langchain)        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _executar_fluxo_langchain(self):        try:            resp = requests.post("http://localhost:8000/executar_fluxo", timeout=15)            if resp.status_code == 200:                QMessageBox.information(self, "Sucesso", resp.json().get("resposta", "Executado"))            else:                QMessageBox.critical(self, "Erro", f"Erro ao executar fluxo: {resp.text}")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Falha ao conectar ao backend: {str(e)}")    def _compendio_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("CompÃªndio tÃ©cnico: logs, interaÃ§Ãµes e aprendizados"))        btn = QPushButton("Ver CompÃªndio")        btn.clicked.connect(lambda: webbrowser.open("http://localhost:8000/compendio"))        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _scraping_local_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("Scraping local: extraÃ§Ã£o offline de conteÃºdos"))        btn = QPushButton("Iniciar Scraping Local")        btn.clicked.connect(self._iniciar_scraping_local)        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _iniciar_scraping_local(self):        try:            resp = requests.get("http://localhost:8000/scraping_local", timeout=15)            if resp.status_code == 200:                QMessageBox.information(self, "Sucesso", resp.json().get("resposta", "Iniciado"))            else:                QMessageBox.critical(self, "Erro", f"Erro ao iniciar scraping: {resp.text}")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Falha ao conectar ao backend: {str(e)}")    def _scraping_externo_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("Scraping Inteligente com LangChain"))        btn = QPushButton("Iniciar Scraping Externo")        btn.clicked.connect(self._iniciar_scraping_externo)        layout.addWidget(btn)        tab.setLayout(layout)        return tab    def _iniciar_scraping_externo(self):        try:            resp = requests.get("http://localhost:8000/scraping_externo", timeout=15)            if resp.status_code == 200:                QMessageBox.information(self, "Sucesso", resp.json().get("resposta", "Iniciado"))            else:                QMessageBox.critical(self, "Erro", f"Erro ao iniciar scraping: {resp.text}")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Falha ao conectar ao backend: {str(e)}")    def _gerador_codigo_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("Gerador de CÃ³digo com IA (Multi-l Mushroomsagem)"))        self.input_prompt = QTextEdit()        self.input_prompt.setPlaceholderText("Descreva o que deseja gerar...")        layout.addWidget(self.input_prompt)        self.linguagem_input = QLineEdit()        self.linguagem_input.setPlaceholderText("Ex: python, javascript, html...")        layout.addWidget(self.linguagem_input)        self.tema_input = QLineEdit()        self.tema_input.setPlaceholderText("Tema (opcional)")        layout.addWidget(self.tema_input)        gerar_btn = QPushButton("Gerar CÃ³digo")        gerar_btn.clicked.connect(self._chamar_gerador_codigo)        layout.addWidget(gerar_btn)        self.codigo_saida = QTextEdit()        self.codigo_saida.setFont(QFont("Courier", 10))        self.codigo_saida.setReadOnly(True)        layout.addWidget(self.codigo_saida)        executar_btn = QPushButton("Executar CÃ³digo (Python)")        executar_btn.clicked.connect(self._executar_codigo_gerado)        layout.addWidget(executar_btn)        salvar_btn = QPushButton("Salvar CÃ³digo para Projeto")        salvar_btn.clicked.connect(self._salvar_codigo_gerado)        layout.addWidget(salvar_btn)        tab.setLayout(layout)        return tab    def _chamar_gerador_codigo(self):        prompt = self.input_prompt.toPlainText()        linguagem = self.linguagem_input.text()        tema = self.tema_input.text()        if not prompt or not linguagem:            QMessageBox.warning(self, "Dados incompletos", "Descreva o prompt e a linguagem.")            return        try:            resposta = requests.post(                "http://localhost:8000/gerar_codigo",                json={"instrucao": prompt, "linguagem": linguagem, "tema": tema},                timeout=15            )            if resposta.status_code == 200:                self.codigo_saida.setPlainText(resposta.json().get("codigo", ""))            else:                QMessageBox.critical(self, "Erro", f"Erro ao gerar cÃ³digo: {resposta.text}")        except Exception as e:            QMessageBox.critical(self, "Erro", f"Falha ao conectar ao backend: {str(e)}")    def _executar_codigo_gerado(self):        codigo = self.codigo_saida.toPlainText()        if not codigo.strip():            QMessageBox.warning(self, "Vazio", "Gere ou cole o cÃ³digo primeiro.")            return        try:            exec(codigo, globals())        except Exception as e:            QMessageBox.critical(self, "Erro", str(e))    def _salvar_codigo_gerado(self):        nome_arquivo, _ = QFileDialog.getSaveFileName(self, "Salvar CÃ³digo", "", "Arquivos Python (*.py);;Todos (*.*)")        if nome_arquivo:            with open(nome_arquivo, "w", encoding="utf-8") as f:                f.write(self.codigo_saida.toPlainText())            QMessageBox.information(self, "Salvo", f"CÃ³digo salvo: {nome_arquivo}")    def _cybersecurity_tab(self):        tab = QWidget()        layout = QVBoxLayout()        layout.addWidget(QLabel("Cybersecurity - DidÃ¡tico e Interativo"))        btn_readme = QPushButton("Ver README")        btn_readme.clicked.connect(lambda: webbrowser.open("http://localhost:8000/readme"))        layout.addWidget(btn_readme)        btn_compendio = QPushButton("CompÃªndio de SeguranÃ§a")        btn_compendio.clicked.connect(lambda: webbrowser.open("http://localhost:8000/security_compendio"))        layout.addWidget(btn_compendio)        layout.addWidget(QLabel("Bots explicativos serÃ£o integrados em breve."))        tab.setLayout(layout)        return tab# BACKEND EM THREADdef iniciar_backend():    uvicorn.run(app, host="0.0.0.0", port=8000)if __name__ == "__main__":    threading.Thread(target=iniciar_backend, daemon=True).start()    app_qt = QApplication(sys.argv)    window = SubDashboardIAWidget()    window.show()    sys.exit(app_qt.exec_())