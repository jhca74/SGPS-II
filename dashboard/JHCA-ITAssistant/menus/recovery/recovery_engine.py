import osimport platformimport subprocessfrom PyQt5.QtWidgets import QMessageBoxclass RecoveryEngine:    def __init__(self):        self.os_type = platform.system().lower()    def executar_comando(self, comando):        try:            resultado = subprocess.check_output(comando, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)            return resultado        except subprocess.CalledProcessError as e:            return f"Erro ao executar comando:\n{e.output}"    def recuperar_ficheiros_apagados(self):        if self.os_type == "linux":            return self.executar_comando("photorec /log")        else:            return "Photorec estÃ¡ disponÃ­vel apenas para sistemas baseados em Unix com integraÃ§Ã£o via linha de comandos."    def reparar_ficheiros_corrompidos(self, tipo_ficheiro):        tipo_ficheiro = tipo_ficheiro.lower()        if tipo_ficheiro in ["docx", "xlsx", "pptx"]:            return (                "Estes ficheiros sÃ£o baseados em ZIP. Pode tentar:\n"                "1. Renomear para .zip\n"                "2. Extrair conteÃºdo\n"                "3. Reparar e recomprimir\n"                "Use bibliotecas Python como zipfile/openpyxl para automatizar."            )        elif tipo_ficheiro == "pdf":            return self.executar_comando("python3 -c 'import fitz; doc=fitz.open(\"danificado.pdf\"); doc.save(\"reparado.pdf\")'")        else:            return "Tipo de ficheiro ainda nÃ£o suportado. Em breve serÃ¡ incluÃ­do suporte para imagens, vÃ­deos e documentos binÃ¡rios."    def recuperar_emails_documentos(self):        return (            "Pode usar IMAP com Python:\n"            "pip install imapclient\n"            "from imapclient import IMAPClient\n"            "server = IMAPClient('imap.gmail.com', ssl=True)\n"            "server.login('utilizador', 'senha')\n"            "server.select_folder('INBOX')\n"            "mensagens = server.search(['ALL'])"        )    def extundelete_recovery(self, device):        return self.executar_comando(f"extundelete {device} --restore-all")    def montar_ntfs_com_ntfs3g(self, device, ponto_montagem):        return self.executar_comando(f"ntfs-3g {device} {ponto_montagem}")    def sleuthkit_listar_arquivos(self, imagem):        return self.executar_comando(f"fls -r -m / {imagem}")    def sleuthkit_recuperar_arquivo(self, imagem, inode, destino):        return self.executar_comando(f"icat {imagem} {inode} > {destino}")    def parted_info(self, device):        return self.executar_comando(f"parted {device} print")    def bulk_extractor_run(self, imagem):        return self.executar_comando(f"bulk_extractor -o saida_bulk {imagem}")