from PyQt5.QtWidgets import (    QApplication, QMainWindow, QWidget, QLabel, QVBoxLayout,    QPushButton, QCheckBox, QTextEdit, QGroupBox, QScrollArea,    QTabWidget, QMessageBox, QLineEdit, QFormLayout)from PyQt5.QtCore import QTimerimport sysimport reimport randomimport requests# --- FunÃ§Ã£o de envio para Telegram ---TELEGRAM_BOT_TOKEN = "7550630501:AAH16eFeMXb89PjQZILuUuMv8mT0MQE4so0"TELEGRAM_USER_ID = "1051208100"def enviar_telegram(mensagem):    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"    payload = {        "chat_id": TELEGRAM_USER_ID,        "text": mensagem    }    try:        requests.post(url, data=payload)    except Exception as e:        print(f"Erro ao enviar alerta para Telegram: {e}")# --- Dados simulados e listas de apoio ---mock_windows = [    "Outlook - Caixa de Entrada",    "Thunderbird - Email do JoÃ£o",    "Gmail - Google Chrome",    "Yahoo Mail - Firefox",    "Notepad",    "Slack - Canal de SeguranÃ§a"]phishing_keywords = [    "urgente", "confirme sua conta", "senha", "clique aqui",    "atualize", "bloqueado", "verificaÃ§Ã£o", "oferta exclusiva"]suspicious_link_patterns = [    r"http[s]?://(?:\d{1,3}\.){3}\d{1,3}",    r"http[s]?://(?:bit\.ly|tinyurl\.com|t\.co)",    r"http[s]?://.*\.xyz"]# --- Aba: IntegraÃ§Ã£o com IA / APIs ---class APIsTab(QWidget):    def __init__(self):        super().__init__()        self.init_ui()    def init_ui(self):        layout = QVBoxLayout()        layout.addWidget(QLabel("ðŸ¤– IntegraÃ§Ã£o com IA e APIs Externas"))        # Campos para inserir chaves de API        self.gpt_key = QLineEdit()        self.gemini_key = QLineEdit()        self.deepseek_key = QLineEdit()        form = QFormLayout()        form.addRow("ðŸ” OpenAI GPT Key:", self.gpt_key)        form.addRow("ðŸ” Gemini API Key:", self.gemini_key)        form.addRow("ðŸ” DeepSeek API Key:", self.deepseek_key)        layout.addLayout(form)        self.prompt_box = QTextEdit()        self.prompt_box.setPlaceholderText("Digite um comando para a IA analisar... Ex: Avaliar e-mail, detectar anomalia, etc.")        layout.addWidget(self.prompt_box)        self.response_box = QTextEdit()        self.response_box.setReadOnly(True)        layout.addWidget(self.response_box)        send_button = QPushButton("ðŸ” Enviar para IA")        send_button.clicked.connect(self.simular_envio_ia)        layout.addWidget(send_button)        self.setLayout(layout)    def simular_envio_ia(self):        prompt = self.prompt_box.toPlainText()        if not prompt.strip():            QMessageBox.information(self, "IA", "Por favor, escreva algo para analisar.")            return        nivel, resposta = analisar_com_ia_local(prompt)        if nivel == "crÃ­tico":            enviar_telegram("[IA/API] Alerta crÃ­tico detectado pela IA: " + prompt[:100])        self.response_box.setText(resposta)# --- IA Local Direta (sem chamadas externas ou FastAPI) ---from AI.ia_engine import analisardef analisar_com_ia_local(texto):    resultado = analisar(texto)    if isinstance(resultado, dict):        return resultado.get("nivel", "normal"), resultado.get("resposta", "[IA] Resposta padrÃ£o.")    return "normal", str(resultado)# --- IntegraÃ§Ã£o IA com EmailMonitorTab, RansomwareTab e DDoSTab ---# ReimplementaÃ§Ã£o parcial para EmailMonitorTab com IAclass EmailMonitorTab(QWidget):    def __init__(self):        super().__init__()        self.selected_windows = []        self.window_checkboxes = []        self.init_ui()    def init_ui(self):        layout = QVBoxLayout()        warning = QLabel("âš ï¸ Por seguranÃ§a, Ã© necessÃ¡rio autorizar novamente a cada sessÃ£o.")        layout.addWidget(warning)        layout.addWidget(QLabel("Selecione os clientes de e-mail a monitorizar:"))        checkbox_group = QGroupBox("Clientes de E-mail Detectados")        checkbox_layout = QVBoxLayout()        for win in mock_windows:            checkbox = QCheckBox(win)            self.window_checkboxes.append(checkbox)            checkbox_layout.addWidget(checkbox)        checkbox_group.setLayout(checkbox_layout)        scroll = QScrollArea()        scroll.setWidget(checkbox_group)        scroll.setWidgetResizable(True)        scroll.setFixedHeight(150)        layout.addWidget(scroll)        self.remember_check = QCheckBox("NÃ£o perguntar novamente nesta sessÃ£o (nÃ£o recomendado)")        layout.addWidget(self.remember_check)        analyze_button = QPushButton("Autorizar e Analisar")        analyze_button.clicked.connect(self.authorize_and_analyze)        layout.addWidget(analyze_button)        self.results = QTextEdit()        self.results.setReadOnly(True)        layout.addWidget(self.results)        self.setLayout(layout)    def authorize_and_analyze(self):        self.results.clear()        selected = [cb.text() for cb in self.window_checkboxes if cb.isChecked()]        if not selected:            QMessageBox.warning(self, "Aviso", "Por favor, selecione pelo menos uma janela de e-mail.")            return        for win in selected:            mock_text = """            OlÃ¡,            Por favor, confirme sua conta clicando no link abaixo:            http://bit.ly/confirmar-conta            Obrigado,            Suporte TÃ©cnico            """            threats = self.analyze_email_content(mock_text)            self.results.append(f"ðŸ“‹ {win} (conteÃºdo visÃ­vel):\n{mock_text.strip()}")            self.results.append(f"ðŸ”Ž AmeaÃ§as: {threats if threats else 'Nenhuma detectada.'}\n")            # ðŸ” AnÃ¡lise com IA local            nivel, resposta = analisar_com_ia_local(mock_text)        self.results.append(f"ðŸ¤– {resposta}")        if nivel == "crÃ­tico":                enviar_telegram(f"[E-mail Monitorado] AmeaÃ§a crÃ­tica identificada por IA: {resposta}")    def analyze_email_content(self, text):        findings = []        for word in phishing_keywords:            if re.search(rf"{re.escape(word)}", text, re.IGNORECASE):                findings.append(f"Palavra-chave: '{word}'")        for pattern in suspicious_link_patterns:            if re.search(pattern, text):                findings.append("Link suspeito")        return "; ".join(findings)# RansomwareTab com IAclass RansomwareTab(QWidget):    def __init__(self):        super().__init__()        self.init_ui()        self.start_background_monitor()    def init_ui(self):        layout = QVBoxLayout()        layout.addWidget(QLabel("ðŸ›¡ï¸ ProteÃ§Ã£o Ransomware Ativa (SimulaÃ§Ã£o em Segundo Plano)"))        self.monitor_output = QTextEdit()        self.monitor_output.setReadOnly(True)        layout.addWidget(self.monitor_output)        self.setLayout(layout)    def start_background_monitor(self):        self.timer = QTimer(self)        self.timer.timeout.connect(self.simulate_ransomware_detection)        self.timer.start(15000)    def simulate_ransomware_detection(self):        simulated_changes = random.choice([            "[OK] Nenhuma alteraÃ§Ã£o suspeita detectada.",            "âš ï¸ Arquivos sendo renomeados em lote!",            "âš ï¸ DetecÃ§Ã£o de encriptaÃ§Ã£o rÃ¡pida em diretÃ³rios sensÃ­veis!",            "ðŸš¨ Tentativa de acesso nÃ£o autorizado a pastas protegidas."        ])        self.monitor_output.append(simulated_changes)        nivel, resposta = analisar_com_ia_local(simulated_changes)        if nivel == "crÃ­tico":            enviar_telegram(f"[Ransomware] {resposta}")# DDoSTab com IAclass DDoSTab(QWidget):    def __init__(self):        super().__init__()        self.init_ui()        self.start_traffic_monitor()    def init_ui(self):        layout = QVBoxLayout()        layout.addWidget(QLabel("ðŸ“ˆ Monitoramento de TrÃ¡fego em Tempo Real (SimulaÃ§Ã£o de DDoS)"))        self.traffic_output = QTextEdit()        self.traffic_output.setReadOnly(True)        layout.addWidget(self.traffic_output)        self.setLayout(layout)    def start_traffic_monitor(self):        self.timer = QTimer(self)        self.timer.timeout.connect(self.simulate_traffic_analysis)        self.timer.start(20000)    def simulate_traffic_analysis(self):        results = random.choice([            "[TrÃ¡fego OK] Dentro dos padrÃµes esperados.",            "âš ï¸ Volume anormal de requisiÃ§Ãµes detectado!",            "ðŸš¨ PossÃ­vel tentativa de DDoS detectada a partir de mÃºltiplos IPs.",            "âš ï¸ RequisiÃ§Ãµes de bot identificadas em massa."        ])        self.traffic_output.append(results)        nivel, resposta = analisar_com_ia_local(results)        if nivel == "crÃ­tico":            enviar_telegram(f"[DDoS] {resposta}")# Janela principalclass SecurityMainWindow(QMainWindow):    def __init__(self):        super().__init__()        self.setWindowTitle("Plataforma de SeguranÃ§a Digital")        self.setGeometry(100, 100, 900, 600)        self.init_ui()    def init_ui(self):        tabs = QTabWidget()        tabs.addTab(EmailMonitorTab(), "MonitorizaÃ§Ã£o de E-mails")        tabs.addTab(RansomwareTab(), "ProteÃ§Ã£o Ransomware")        tabs.addTab(DDoSTab(), "AnÃ¡lise de TrÃ¡fego / DDoS")        tabs.addTab(APIsTab(), "IntegraÃ§Ã£o com IA / APIs")        self.setCentralWidget(tabs)# ExecuÃ§Ã£o local (descomentar para uso fora do ambiente canvas)# if __name__ == "__main__":#     app = QApplication(sys.argv)#     window = SecurityMainWindow()#     window.show()#     sys.exit(app.exec_())