# --- VersÃµes com exportaÃ§Ã£o local e envio por email integrados ---# === MENU PRINCIPAL: Devices ===# Submenus atuais:#   - DiagnÃ³stico de EspaÃ§o em Disco#   - Ficheiros Maiores Encontrados#   - Benchmark de Velocidade com GrÃ¡fico#   - Listagem de Dispositivos USB#   - GrÃ¡fico de EspaÃ§o (implementado)#   - AnÃ¡lise por Tipo de Ficheiro (previsto)#   - Backup/ExploraÃ§Ã£o/Desmontagem de USB (previsto)# === SUBMENU: DiagnÃ³stico de EspaÃ§o em Disco ===# ... (sem alteraÃ§Ãµes aqui)# === SUBMENU: Listagem de Dispositivos USB ===# ... (sem alteraÃ§Ãµes aqui)# === SUBMENU: GrÃ¡fico de EspaÃ§o (Pie Chart) ===# OpÃ§Ãµes:# - Selecionar unidade ou pasta# - Mostrar espaÃ§o usado vs livre em grÃ¡fico# - Exportar relatÃ³rio# - Salvar imagem do grÃ¡fico# - Enviar por emaildef show_disk_pie_chart(self):    import shutil    import matplotlib.pyplot as plt    from PyQt5.QtWidgets import QFileDialog    from datetime import datetime    from modules.email_sender import send_email_report    self.result_text.clear()    self.result_text.append("ðŸ“Š GrÃ¡fico de EspaÃ§o em Disco")    try:        path = QFileDialog.getExistingDirectory(self, "Escolha a unidade ou pasta para anÃ¡lise")        if not path:            self.result_text.append("âŒ OperaÃ§Ã£o cancelada.")            return        total, used, free = shutil.disk_usage(path)        used_gb = used / (1024**3)        free_gb = free / (1024**3)        total_gb = total / (1024**3)        self.result_text.append(f"Total: {total_gb:.2f} GB")        self.result_text.append(f"Usado: {used_gb:.2f} GB")        self.result_text.append(f"Livre: {free_gb:.2f} GB")        # Criar grÃ¡fico        labels = ['Usado', 'Livre']        sizes = [used_gb, free_gb]        fig, ax = plt.subplots()        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)        ax.axis('equal')        plt.title("UtilizaÃ§Ã£o do Disco")        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        img_path = f"grafico_espaco_{now}.png"        plt.savefig(img_path)        plt.close()        self.result_text.append(f"ðŸ–¼ GrÃ¡fico salvo em: {img_path}")        # Exportar relatÃ³rio        txt_path = f"relatorio_espaco_{now}.txt"        with open(txt_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        # Enviar email com grÃ¡fico e texto        send_email_report(            assunto="GrÃ¡fico de EspaÃ§o em Disco",            corpo="Segue em anexo o grÃ¡fico e relatÃ³rio de utilizaÃ§Ã£o do disco.",            anexo_path=txt_path        )        self.result_text.append("ðŸ“§ Email enviado com sucesso!")    except Exception as e:        self.result_text.append(f"Erro ao gerar grÃ¡fico: {e}")