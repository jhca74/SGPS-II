import osfrom PyQt5.QtWidgets import QFileDialog, QInputDialogfrom datetime import datetimefrom modules.email_sender import send_email_reportdef show_large_files(self):    self.result_text.clear()    folder = QFileDialog.getExistingDirectory(self, "Escolha a pasta base para procurar ficheiros grandes")    if not folder:        self.result_text.append("âŒ OperaÃ§Ã£o cancelada.")        return    threshold_mb, ok = QInputDialog.getInt(self, "Tamanho mÃ­nimo (MB)", "Mostrar ficheiros maiores que (MB):", 100, 10)    if not ok:        self.result_text.append("âŒ OperaÃ§Ã£o cancelada.")        return    self.result_text.append(f"ðŸ” A procurar ficheiros > {threshold_mb} MB em {folder}\n")    threshold_bytes = threshold_mb * 1024 * 1024    large_files = []    try:        for dirpath, _, files in os.walk(folder):            for f in files:                full_path = os.path.join(dirpath, f)                try:                    size = os.path.getsize(full_path)                    if size > threshold_bytes:                        large_files.append((f, size, full_path))                except:                    continue        large_files.sort(key=lambda x: x[1], reverse=True)        for name, size, path in large_files[:20]:            mb = size / (1024 ** 2)            self.result_text.append(f"ðŸ“„ {name}: {mb:.2f} MB")            self.result_text.append(f"     Caminho: {path}\n")        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        export_path = f"ficheiros_grandes_{now}.txt"        with open(export_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        self.result_text.append(f"ðŸ“„ RelatÃ³rio salvo: {export_path}")        send_email_report(            assunto="Ficheiros Maiores Encontrados",            corpo="Segue o relatÃ³rio de ficheiros grandes gerado pelo JHCA IT Assistant.",            anexo_path=export_path        )        self.result_text.append("ðŸ“§ Email enviado com sucesso!")    except Exception as e:        self.result_text.append(f"Erro: {e}")