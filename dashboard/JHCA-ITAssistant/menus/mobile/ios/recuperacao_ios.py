# === Submenu: RecuperaÃ§Ã£o de Ficheiros iOS ===# === Submenu: RecuperaÃ§Ã£o de Ficheiros iOS ===import subprocessfrom datetime import datetimefrom PyQt5.QtWidgets import QMessageBoxfrom modules.email_sender import send_email_reportimport jsonfrom pathlib import Pathdef recuperacao_ios(self):    self.result_text.clear()    self.result_text.append("ðŸ”„ RecuperaÃ§Ã£o de Ficheiros iOS")    try:        self.result_text.append("ðŸ“¦ VerificaÃ§Ã£o de backups locais ou espaÃ§o disponÃ­vel...")                # Verificar capacidade e espaÃ§o disponÃ­vel (via ideviceinfo)        info = subprocess.check_output(["ideviceinfo"], text=True, timeout=10)        linhas = info.strip().splitlines()        armazenamento = [l for l in linhas if any(k in l for k in ["TotalDataCapacity", "TotalDataAvailable"])]        for linha in armazenamento:            self.result_text.append(linha)        # SugestÃµes reais de recuperaÃ§Ã£o        sugestoes = [            "âœ… SugestÃ£o: Utilize iTunes Backup Extractor para recuperar ficheiros de backups.",            "âœ… SugestÃ£o: Se tiver jailbreak, PhotoRec pode recuperar diretamente do sistema de ficheiros.",            "âœ… SugestÃ£o: EaseUS MobiSaver permite recuperar mensagens e fotos diretamente.",            "âœ… SugestÃ£o: iPhone Backup Extractor funciona com backups corrompidos do iTunes."        ]        self.result_text.append("\nðŸ’¡ SugestÃµes de RecuperaÃ§Ã£o:")        for s in sugestoes:            self.result_text.append(s)        # Exportar relatÃ³rio        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        relatorio_path = f"recuperacao_ios_{now}.txt"        with open(relatorio_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        send_email_report(            assunto="RecuperaÃ§Ã£o de Ficheiros iOS",            corpo="Segue o relatÃ³rio de estado e sugestÃµes de recuperaÃ§Ã£o de dados iOS.",            anexo_path=relatorio_path        )        self.result_text.append("ðŸ“¤ RelatÃ³rio enviado por email com sucesso!")        # Metadata        metadata = {            "submodulo": "recuperacao_ios",            "status": "executado",            "sugestoes_geradas": sugestoes        }        Path("txt").mkdir(parents=True, exist_ok=True)        with open("txt/recuperacao_ios_metadata.json", "w", encoding="utf-8") as f:            json.dump(metadata, f, indent=4)    except Exception as e:        QMessageBox.warning(None, "Erro", f"Falha ao verificar dados iOS: {e}")        self.result_text.append(f"âŒ Erro: {e}")