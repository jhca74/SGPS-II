# === Submenu: GestÃ£o de Dados Android ===# === Submenu: GestÃ£o de Dados Android ===import subprocessfrom datetime import datetimefrom PyQt5.QtWidgets import QMessageBoxfrom modules.email_sender import send_email_reportimport jsonfrom pathlib import Pathdef gestao_dados_android(self):    self.result_text.clear()    self.result_text.append("ðŸ—ƒ GestÃ£o de Dados Android")    try:        # Listar apps instaladas        self.result_text.append("ðŸ“¦ AplicaÃ§Ãµes instaladas (pacotes):\n")        apps = subprocess.check_output(["adb", "shell", "pm", "list", "packages"], text=True)        apps_list = [line.replace("package:", "").strip() for line in apps.strip().splitlines()]        for app in apps_list[:15]:            self.result_text.append(f" - {app}")        # SugestÃµes com base em ferramentas reais        sugestoes = [            "âœ… SugestÃ£o: Use Open Android Backup para guardar apps e dados (sem root).",            "âœ… SugestÃ£o: scrcpy permite controlar e aceder remotamente ao Android via PC.",            "âœ… SugestÃ£o: AirDroid Local permite transferir ficheiros sem ligaÃ§Ã£o Ã  cloud.",            "âœ… SugestÃ£o: Android File Host CLI permite enviar e receber ficheiros por terminal."        ]        self.result_text.append("\nðŸ’¡ SugestÃµes de GestÃ£o:")        for s in sugestoes:            self.result_text.append(s)        # Exportar relatÃ³rio        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        relatorio_path = f"gestao_dados_android_{now}.txt"        with open(relatorio_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        send_email_report(            assunto="RelatÃ³rio de GestÃ£o de Dados Android",            corpo="Segue o relatÃ³rio com aplicaÃ§Ãµes instaladas e sugestÃµes para gestÃ£o de dados.",            anexo_path=relatorio_path        )        self.result_text.append("ðŸ“¤ RelatÃ³rio enviado por email com sucesso!")        # Metadata        metadata = {            "submodulo": "gestao_dados_android",            "status": "executado",            "apps_listadas": apps_list[:15],            "sugestoes_geradas": sugestoes        }        Path("txt").mkdir(parents=True, exist_ok=True)        with open("txt/gestao_dados_metadata.json", "w", encoding="utf-8") as f:            json.dump(metadata, f, indent=4)    except Exception as e:        QMessageBox.warning(None, "Erro", f"Falha ao recolher dados: {e}")        self.result_text.append(f"âŒ Erro: {e}")