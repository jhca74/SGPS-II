# === Submenu: ReparaÃ§Ã£o de Sistema Android ===# === Submenu: ReparaÃ§Ã£o de Sistema Android ===import subprocessfrom datetime import datetimefrom PyQt5.QtWidgets import QMessageBoxfrom modules.email_sender import send_email_reportimport jsonfrom pathlib import Pathdef diagnostico_reparacao_android(self):    self.result_text.clear()    self.result_text.append("ðŸ›  ReparaÃ§Ã£o de Sistema Android")    try:        # Verificar se o dispositivo responde via adb        estado = subprocess.check_output(["adb", "get-state"], text=True).strip()        self.result_text.append(f"ðŸ“± Estado do dispositivo: {estado}")        if estado != "device":            self.result_text.append("âš ï¸ Dispositivo nÃ£o estÃ¡ totalmente operacional via ADB.")        else:            bootmode = subprocess.check_output(["adb", "shell", "getprop", "ro.boot.mode"], text=True).strip()            self.result_text.append(f"ðŸ§­ Modo de arranque atual: {bootmode}")        # SugestÃµes inteligentes com base no modo        sugestoes = []        if "edl" in bootmode.lower():            sugestoes.append("âœ… EDL Mode detetado. SugestÃ£o: use QFIL ou ferramenta equivalente com firehose loader.")        elif "recovery" in bootmode.lower():            sugestoes.append("âœ… Modo Recovery. Pode tentar ADB sideload para recuperaÃ§Ã£o via ROM.")        elif "fastboot" in bootmode.lower():            sugestoes.append("âœ… Fastboot disponÃ­vel. SugestÃ£o: use comandos fastboot para flash do sistema.")        else:            sugestoes.extend([                "âœ… Se o dispositivo nÃ£o liga, tente SP Flash Tool (MediaTek) ou Heimdall (Samsung).",                "âœ… Verifique se hÃ¡ firmware compatÃ­vel disponÃ­vel no Android File Host.",                "âœ… Ferramentas Ãºteis: MTKClient, TWRP Recovery, Magisk (com root)."            ])        self.result_text.append("\nðŸ’¡ SugestÃµes de ReparaÃ§Ã£o:")        for s in sugestoes:            self.result_text.append(s)        # Exportar relatÃ³rio        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")        relatorio_path = f"reparacao_android_{now}.txt"        with open(relatorio_path, "w", encoding="utf-8") as f:            f.write(self.result_text.toPlainText())        send_email_report(            assunto="DiagnÃ³stico de ReparaÃ§Ã£o Android",            corpo="Segue em anexo o relatÃ³rio de diagnÃ³stico de sistema e sugestÃµes de recuperaÃ§Ã£o.",            anexo_path=relatorio_path        )        self.result_text.append("ðŸ“¤ RelatÃ³rio enviado por email com sucesso!")        # Metadata        metadata = {            "submodulo": "reparacao_android",            "status": "executado",            "estado_dispositivo": estado,            "modo_boot": bootmode if estado == "device" else "desconhecido",            "sugestoes_geradas": sugestoes        }        Path("txt").mkdir(parents=True, exist_ok=True)        with open("txt/reparacao_metadata.json", "w", encoding="utf-8") as f:            json.dump(metadata, f, indent=4)    except Exception as e:        QMessageBox.warning(None, "Erro", f"Falha ao executar diagnÃ³stico: {e}")        self.result_text.append(f"âŒ Erro: {e}")