import platformimport subprocessimport psutilimport socketimport uuidfrom scraper_especificacoes import aplicar_especificacoes_em_diagnosticoclass LeitorBase:    def coletar_dados(self):        raise NotImplementedError("Subclasse deve implementar coletar_dados")class LeitorWMI(LeitorBase):    def coletar_dados(self):        import wmi        c = wmi.WMI()        try:            sistema = c.Win32_ComputerSystem()[0]            bios = c.Win32_BIOS()[0]            os = c.Win32_OperatingSystem()[0]            dados = {                "marca": sistema.Manufacturer,                "modelo": sistema.Model,                "ram_total": round(int(sistema.TotalPhysicalMemory) / (1024**3), 2),                "bios_versao": bios.SMBIOSBIOSVersion,                "so": f"{os.Caption} {os.Version}",                "hostname": socket.gethostname(),                "ip": socket.gethostbyname(socket.gethostname()),                "uuid": str(uuid.uuid4())            }            return aplicar_especificacoes_em_diagnostico(dados)        except Exception as e:            return {"erro": str(e)}class LeitorLinux(LeitorBase):    def coletar_dados(self):        try:            marca = subprocess.getoutput("cat /sys/devices/virtual/dmi/id/sys_vendor")            modelo = subprocess.getoutput("cat /sys/devices/virtual/dmi/id/product_name")            ram = round(psutil.virtual_memory().total / (1024**3), 2)            hostname = socket.gethostname()            ip = socket.gethostbyname(hostname)            uuid_value = subprocess.getoutput("cat /sys/class/dmi/id/product_uuid")            so = subprocess.getoutput("lsb_release -d").split(":")[1].strip()            dados = {                "marca": marca,                "modelo": modelo,                "ram_total": ram,                "bios_versao": "N/A",                "so": so,                "hostname": hostname,                "ip": ip,                "uuid": uuid_value            }            return aplicar_especificacoes_em_diagnostico(dados)        except Exception as e:            return {"erro": str(e)}class LeitorMac(LeitorBase):    def coletar_dados(self):        try:            marca = "Apple"            modelo = subprocess.getoutput("sysctl -n hw.model")            ram = round(int(subprocess.getoutput("sysctl -n hw.memsize")) / (1024**3), 2)            hostname = socket.gethostname()            ip = socket.gethostbyname(hostname)            uuid_value = subprocess.getoutput("ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID | cut -d \" -f4")            so = subprocess.getoutput("sw_vers -productName") + " " + subprocess.getoutput("sw_vers -productVersion")            dados = {                "marca": marca,                "modelo": modelo,                "ram_total": ram,                "bios_versao": "N/A",                "so": so,                "hostname": hostname,                "ip": ip,                "uuid": uuid_value            }            return aplicar_especificacoes_em_diagnostico(dados)        except Exception as e:            return {"erro": str(e)}def obter_leitor():    sistema = platform.system()    if sistema == "Windows":        return LeitorWMI()    elif sistema == "Linux":        return LeitorLinux()    elif sistema == "Darwin":        return LeitorMac()    else:        raise Exception("Sistema operativo nÃ£o suportado.")